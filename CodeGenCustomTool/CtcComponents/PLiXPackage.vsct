<?xml version="1.0" encoding="utf-8"?>
<CommandTable xmlns="http://schemas.microsoft.com/VisualStudio/2005-10-18/CommandTable" xmlns:xs="http://www.w3.org/2001/XMLSchema">
<!-- ï»¿// -->
<!-- // This is the file that defines the actual layout and type of the commands. -->
<!-- // It is divided in different sections (e.g. command definition, command -->
<!-- // placement, ...), with each defining a specific set of properties. -->
<!-- // See the comment before each section for more details about how to -->
<!-- // use it. -->
<!-- // -->
<!--  -->
<!-- // The CTC compiler (the tool that translates this file into the binary -->
<!-- // format that VisualStudio will consume) has the ability to run a preprocessor -->
<!-- // on the ctc file; this preprocessor is (usually) the C++ preprocessor, so -->
<!-- // it is possible to define includes and macros with the same syntax used -->
<!-- // in C++ files. Using this ability of the compiler here, we include some files -->
<!-- // defining some of the constants that we will use inside the file. -->
<!--  -->
<Extern href="stdidcmd.h"/>
<!-- #include "stdidcmd.h"      // This is the file that defines the IDs for all the -->
<!--                            // commands exposed by VisualStudio. -->
<!--  -->
<Extern href="vsshlids.h"/>
<!-- #include "vsshlids.h"      // This header contains the command ids for the menus -->
<!--                            // provided by the shell. -->
<!--  -->
<!-- <Extern href="msobtnid.h"/> -->
<!-- #include "msobtnid.h"      // Definition of some CTC specific constants. In this sample -->
<!--                            // we use it for the IDs inside the guidOfficeIcon group. -->
<!--  -->
<!--  -->
<Extern href="CommandIds.h"/>
<!-- #include "CommandIds.h"      // Definition of the IDs of the commands and CTC elements -->
<!--                            // specific for this sample. -->
<!--  -->
<Extern href="Resource.h"/>
<!-- #include "Resource.h"      // Definition of the IDs of the resources used by this package; -->
<!--                            // Here it is used to include the bitmap with the images used for -->
<!--                            // the commands. -->
<!--  -->
<Extern href="Guids.h"/>
<!-- #include "Guids.h"         // This is the file with the definition of the Guid -->
<!--                            // specific for this sample. -->
<!--  -->
<!-- // shorthand macros for a more compact and manageable table -->
<!-- #define OI_NOID         guidOfficeIcon:msotcidNoIcon -->
<!-- #define DIS_DEF         DEFAULTDISABLED | DEFAULTINVISIBLE | DYNAMICVISIBILITY -->
<!-- #define VIS_DEF         COMMANDWELLONLY -->
<!--  -->
<!--  -->
<!-- // The CMDS_SECTION section is where we the commands, menus and menu groups are defined.  -->
<!-- // This section uses a Guid to identify the package that provides the command defined  -->
<!-- // inside it. -->
<Commands package="guidPlixPackagePkg">
<!-- CMDS_SECTION guidPlixPackagePkg -->
<!--  -->
<!--   // Inside this section we have different sub-sections: one for the menus, another  -->
<!--   // for the menu groups, one for the buttons (the actual commands), one for the combos -->
<!--   // and the last one for the bitmaps used. Each element is identified by a command id that  -->
<!--   // is a unique pair of guid and numeric identifier; the guid part of the identifier is usually  -->
<!--   // called "command set" and is used to group different command inside a logically related  -->
<!--   // group; your package should define its own command set in order to avoid collisions  -->
<!--   // with command ids defined by other packages. -->
<!--  -->
<!--   // This is the sub-section that defines the menus and toolbars. -->
    <Menus>
<!--   MENUS_BEGIN -->
<!--   // To define an element in this group you need an ID, a parent group, a display priority, -->
<!--   // a menu type, a name and a default text. -->
<!--  -->
<!--   // NewMenu                              Relative to Group                       Priority    Type        Name                    Text -->
        <Menu guid="guidPlixPackageCmdSet" id="menuidSnippetPreviewToolbar" priority="0x0000" type="ToolWindowToolbar">
            <Parent guid="guidPlixPackageCmdSet" id="menuidSnippetPreviewToolbar"/>
            <Strings>
                <ButtonText>PlixSnippetPreviewToolbar</ButtonText>
                <CommandName>PLiX Snippet Preview Toolbar</CommandName>
            </Strings>
        </Menu>
        <Menu guid="guidPlixPackageCmdSet" id="menuidSnippetPreviewFormatterMenu" priority="0x0000" type="MenuControllerLatched">
            <Parent guid="guidPlixPackageCmdSet" id="groupidSnippetPreviewCommands"/>
            <Strings>
                <ButtonText>PlixSnippetPreviewFormatterChoice</ButtonText>
                <CommandName>Formatter Choice Submenu</CommandName>
            </Strings>
        </Menu>
        <Menu guid="guidPlixPackageCmdSet" id="menuidSnippetPreviewParentChoiceMenu" priority="0x0001" type="MenuControllerLatched">
            <Parent guid="guidPlixPackageCmdSet" id="groupidSnippetPreviewCommands"/>
            <Strings>
                <ButtonText>PlixSnippetPreviewParentChoice</ButtonText>
                <CommandName>Parent Element</CommandName>
            </Strings>
        </Menu>
<!--  -->
<!--  -->
<!--  -->
    </Menus>
<!--   MENUS_END -->
<!--  -->
<!--   // In this section you can define new menu groups. A menu group is a container for -->
<!--   // other menus or buttons (commands); from a visual point of view you can see the -->
<!--   // group as the part of a menu contained between two lines. The parent of a group -->
<!--   // must be a menu. -->
    <Groups>
<!--   NEWGROUPS_BEGIN -->
<!--   // NewGroup                              Parent Group                            Priority -->
        <Group guid="guidPlixPackageCmdSet" id="groupidSnippetPreviewCommands" priority="0x0000">
            <Parent guid="guidPlixPackageCmdSet" id="menuidSnippetPreviewToolbar"/>
        </Group>
        <Group guid="guidPlixPackageCmdSet" id="groupidFormatterChoiceCommands" priority="0x0000">
            <Parent guid="guidPlixPackageCmdSet" id="menuidSnippetPreviewFormatterMenu"/>
        </Group>
        <Group guid="guidPlixPackageCmdSet" id="groupidParentChoice" priority="0x0000">
            <Parent guid="guidPlixPackageCmdSet" id="menuidSnippetPreviewParentChoiceMenu"/>
        </Group>
<!--  -->
<!--  -->
    </Groups>
<!--   NEWGROUPS_END -->
<!--  -->
<!--   // Button section. -->
<!--   // This section defines the elements the user can interact with, like a menu command or a button  -->
<!--   // or combo box in a toolbar. -->
    <Buttons>
<!--   BUTTONS_BEGIN -->
<!--   // To define a menu group you have to specify its ID, the parent menu and its display priority. -->
<!--   // Some commands are not defined as shared, so they use our package CLSID -->
<!--   // as the command set GUID. Also, by specifying blank for the FLAGS, the command is -->
<!--   // default visible and enabled. Other valid values for FLAGS are the following: -->
<!--   //    DEFAULTDISABLED, DEFAULTINVISIBLE, DYNAMICVISIBILITY, TEXTCHANGES -->
<!--   // These values for FLAGS can be or'ed together, e.g. "DEFAULTINVISIBLE | DYNAMICVISIBILITY" -->
<!--   // If you do not want an image next to your command, set the image to "guidOfficeIcon:msotcidNoIcon" -->
<!--  -->
<!--   // Command                    Parent Group                Priority    Image            Type    Visibility         -->
        <Button guid="guidPlixPackageCmdSet" id="cmdidPlixSnippetPreviewWindow" priority="0x0101" type="Button">
            <Parent guid="guidSHLMainMenu" id="IDG_VS_WNDO_OTRWNDWS1"/>
            <Icon guid="guidPlixPackageCmdSet" id="bmpPicPlixPreview"/>
            <Strings>
                <ButtonText>&amp;PLiX Snippet Preview Window</ButtonText>
            </Strings>
        </Button>
        <Button guid="guidPlixPackageCmdSet" id="cmdidPlixCSharpFormatter" priority="0x0000" type="Button">
            <Parent guid="guidPlixPackageCmdSet" id="groupidFormatterChoiceCommands"/>
            <Icon guid="guidPlixPackageCmdSet" id="bmpPicCSharp"/>
            <CommandFlag>DefaultInvisible</CommandFlag>
            <CommandFlag>DynamicVisibility</CommandFlag>
            <Strings>
                <ButtonText>C#</ButtonText>
            </Strings>
        </Button>
        <Button guid="guidPlixPackageCmdSet" id="cmdidPlixVBFormatter" priority="0x0010" type="Button">
            <Parent guid="guidPlixPackageCmdSet" id="groupidFormatterChoiceCommands"/>
            <Icon guid="guidPlixPackageCmdSet" id="bmpPicVB"/>
            <CommandFlag>DefaultInvisible</CommandFlag>
            <CommandFlag>DynamicVisibility</CommandFlag>
            <Strings>
                <ButtonText>VB</ButtonText>
            </Strings>
        </Button>
        <Button guid="guidPlixPackageCmdSet" id="cmdidPlixPHPFormatter" priority="0x0030" type="Button">
            <Parent guid="guidPlixPackageCmdSet" id="groupidFormatterChoiceCommands"/>
            <Icon guid="guidPlixPackageCmdSet" id="bmpPicPHP"/>
            <CommandFlag>DefaultInvisible</CommandFlag>
            <CommandFlag>DynamicVisibility</CommandFlag>
            <Strings>
                <ButtonText>PHP</ButtonText>
            </Strings>
        </Button>
        <Button guid="guidPlixPackageCmdSet" id="cmdidPlixJSharpFormatter" priority="0x0040" type="Button">
            <Parent guid="guidPlixPackageCmdSet" id="groupidFormatterChoiceCommands"/>
            <Icon guid="guidPlixPackageCmdSet" id="bmpPicJSL"/>
            <CommandFlag>DefaultInvisible</CommandFlag>
            <CommandFlag>DynamicVisibility</CommandFlag>
            <Strings>
                <ButtonText>J#</ButtonText>
            </Strings>
        </Button>
        <Button guid="guidPlixPackageCmdSet" id="cmdidPlixPYFormatter" priority="0x0050" type="Button">
            <Parent guid="guidPlixPackageCmdSet" id="groupidFormatterChoiceCommands"/>
            <Icon guid="guidPlixPackageCmdSet" id="bmpPicPY"/>
            <CommandFlag>DefaultInvisible</CommandFlag>
            <CommandFlag>DynamicVisibility</CommandFlag>
            <Strings>
                <ButtonText>PY</ButtonText>
            </Strings>
        </Button>
        <Button guid="guidPlixPackageCmdSet" id="cmdidPlixSnippetPreviewParentChoice" priority="0x0000" type="Button">
            <Parent guid="guidPlixPackageCmdSet" id="groupidParentChoice"/>
            <Icon guid="guidPlixPackageCmdSet" id="bmpPicParent"/>
            <CommandFlag>DynamicItemStart</CommandFlag>
            <CommandFlag>DefaultInvisible</CommandFlag>
            <CommandFlag>DynamicVisibility</CommandFlag>
            <CommandFlag>TextChanges</CommandFlag>
            <Strings>
                <ButtonText>Parent Element</ButtonText>
            </Strings>
        </Button>
        <Button guid="guidPlixPackageCmdSet" id="cmdidPlixSnippetPreviewSelfChoice" priority="0x0001" type="Button">
            <Parent guid="guidPlixPackageCmdSet" id="groupidParentChoice"/>
            <Icon guid="guidPlixPackageCmdSet" id="bmpPicSelf"/>
            <CommandFlag>DontCache</CommandFlag>
            <CommandFlag>DefaultInvisible</CommandFlag>
            <CommandFlag>DynamicVisibility</CommandFlag>
            <CommandFlag>TextChanges</CommandFlag>
            <Strings>
                <ButtonText>Self Element</ButtonText>
            </Strings>
        </Button>
    </Buttons>
<!--   BUTTONS_END -->
<!--  -->
<!--   // The bitmaps section is used to define the bitmaps that are used for the commands. -->
<Bitmaps>
<!--   BITMAPS_BEGIN -->
<!--   // The bitmap id is defined in a way that is a little bit different from the others: -->
<!--   // the declaration starts with a guid for the bitmap strip, then there is the resource id of the -->
<!--   // bitmap strip containing the bitmaps and then there are the numeric ids of the elements used -->
<!--   // inside a button definition. An important aspect of this declaration is that the element id -->
<!--   // must be the actual index (1-based) of the bitmap inside the bitmap strip. -->
<!--  -->
<!--   // Bitmap                          Bitmap Index, Bitmap Index, ... -->
    <Bitmap guid="guidPlixPackageCmdSet" resID="IDB_MENU_IMAGES" usedList="bmpPicPlixPreview, bmpPicSelf, bmpPicParent, bmpPicCSharp, bmpPicVB, bmpPicPHP, bmpPicJSL, bmpPicPY"/>
</Bitmaps>
<!--   BITMAPS_END -->
<!--  -->
</Commands>
<!-- CMDS_END -->
<!--  -->
<!-- // Within this section you can specify the set of commands defined somewhere else that your  -->
<!-- // packages uses; for instance if your package uses the standard âCopyâ command, you donât  -->
<!-- // need to define it, because it is defined by the shell, but you have to use this section  -->
<!-- // of the CTC file to notify the shell that your package uses it using this section. -->
<!--  -->
<UsedCommands>
<!-- CMDUSED_SECTION -->
<!--  -->
</UsedCommands>
<!-- CMDUSED_END -->
<!--  -->
<!-- // Inside this section, we have the ability to place menu groups inside some other menu or -->
<!-- // menu / commands inside other groups. -->
<!-- // For instance, it is possible to place one of VisualStudio's menus or commands inside one of our  -->
<!-- // groups or one of our groups inside a menu defined somewhere else. -->
<CommandPlacements>
<!-- CMDPLACEMENT_SECTION -->
<!--   // Command                             Group                                Priority -->
</CommandPlacements>
<!-- CMDPLACEMENT_END -->
<!--  -->
<!--  -->
<VisibilityConstraints>
<!-- VISIBILITY_SECTION -->
<!--   // Command                          GUID when visible -->
<!--  -->
<!--  -->
<!--  -->
</VisibilityConstraints>
<!-- VISIBILITY_END -->
<!--  -->
<!-- // This section is where you can associate a command with a keyboard shortcut; this association is  -->
<!-- // valid within a specific UI context, that is when the shell is inside a specific mode, e.g. during  -->
<!-- // debugging, editing a file or when the user is using a specific designer. -->
<KeyBindings>
<!-- KEYBINDINGS_SECTION -->
<!--   // To define a binding, you have to specify the sequence of keys to press to activate the command  -->
<!--   // (keystate); the syntax to use is <key>[:<special keys>] where the special keys section can be  -->
<!--   // empty. The accepted special keys and their representation are: -->
<!--   //   Alt - A -->
<!--   //   Control - C -->
<!--   //   Shift - S -->
<!--   //   Windows Key - W -->
<!--   // For example, if you want to define a binding for <Control>C the definition will be 'C':C; if the  -->
<!--   // binding is <Control><Alt>C, then the keybinding is 'C':AC. -->
<!--   // -->
<!--   // Notice that Visual Studio has a lot of components and commands, so it can be difficult to find a  -->
<!--   // key binding not used by somebody else; if the key bindings are conflicting only one will be used -->
<!--   // and one problem is that the shell will not inform the user that a conflict was found. The only  -->
<!--   // way to detect the problem is to start Visual Studio under debugger, try to execute any command  -->
<!--   // and look if there is a message in the output window about a duplicated accelerator found. -->
<!--  -->
<!--   // Command                        when available          emulation               keystate -->
<!--  -->
</KeyBindings>
<!-- KEYBINDINGS_END -->
</CommandTable>
